<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>N2O ASYNC</title>
    <link rel="stylesheet" href="https://n2o.space/n2o.css" />
</head>

<body>

<header>
    <a href="../index.html"><img src="https://n2o.space/img/Synrc Neo.svg"></a>
    <h1>N2O Async Processes</h1>
</header>

<main>
    <section>


<h3>INTRO</h3>


<p>The <b>n2o_async</b> module is a simplified way to create
local erlang processes as async services for external services, timers, system services.</p>

<h3>EXAMPLE</h3>

<p>Here is literal implementation of N2O Timer which invalidates
   the caching table used for session variables.</p>

        <figure>
            <figcaption>Listing 1. Invalidate Cache by Timer</figcaption>
<code>
 proc(init,#handler{}=Async) ->
     {ok,Async#handler{state=timer(ping())}};

 proc({timer,ping},#handler{state=Timer}=Async) ->
     erlang:cancel_timer(Timer),
     io:format("n2o Timer: ~p\r~n",[ping]),
     n2o:invalidate_cache(caching),
     {reply,ok,Async#handler{state=timer_restart(ping())}}.

 timer(Diff) ->
     {X,Y,Z} = Diff,
     erlang:send_after(1000*(Z+60*Y+60*60*X),self(),{timer,ping}).

 ping() ->
     application:get_env(n2o,timer,{0,1,0}).

</code></figure>

<p>Main purpose of <b>n2o_async</b> is to create such processes from
single <b>proc/2</b> function and track pid in ETS table which is specified during
process #handler{} initialization.</p>

        <figure>
            <figcaption>Listing 1. Understaning n2o_async</figcaption>
<code>
 1> supervisor:which_children(n2o).
 [{{ring,4},<0.1661.0>,worker,[n2o_vnode]},
  {{ring,3},<0.1655.0>,worker,[n2o_vnode]},
  {{ring,2},<0.1653.0>,worker,[n2o_vnode]},
  {{ring,1},<0.1651.0>,worker,[n2o_vnode]},
  {{caching,"timer"},<0.1604.0>,worker,[n2o]}]

 2> ets:tab2list(ring).
 [{{ring,4},infinity,<0.1661.0>},
 {{ring,1},infinity,<0.1651.0>},
 {{ring,2},infinity,<0.1653.0>},
 {{ring,3},infinity,<0.1655.0>}]

 3> ets:tab2list(caching).
 [{{caching,"timer"},infinity,<0.1604.0>}]

 4> n2o_async:send(caching,"timer",{timer,ping}).
 n2o Timer: ping
 ok

 5> n2o_async:pid(caching,"timer").
 <0.1604.0>

</code></figure>

<h3>RECORDS</h3>

<h3>CALLBACK</h3>

<h4>proc(term(),#handler{}) -> #ok{} | #reply{}.</h4>

<p>The <b>proc/2</b> is a callback that will be called on each
<b>gen_server</b>'s calls: <b>handle_call</b>,
<b>handle_cast</b> and <b>handle_info</b>, its <b>init</b>
and <b>terminate</b>.</p>

<h3>API</h3>

<h4>start(#handler{}) -> {atom(),term()} | .</h4>

<p>Spawns <b>proc/2</b> function inside gen_server under supervision.</p>

<h4> init(Pid,Class,Name) -> type gen_server:call/2.</h4>

<p>Put Pid in <b>n2o</b> cache and also remember the caller
Pid for <b>n2o</b> messages.</p>

<h4>flush(Channel) -> type gen_server:call/2.</h4>

<p>Send FLUSH message with current actions in process dictionary,
then cleanup all actions.
</p>

<h4> send(Class,Name,Message) -> type gen_server:call/2. </h4>

<p>Sends <b>gen_call</b> message to process by <b>Class,Name}</b>
key, which was stored in cache during initialization.
</p>

<h3>OTHER</h3>

<p>Also you may refer to:
<b><a href="n2o.htm">n2o</a></b>,
<a href="n2o_nitro.htm"><b>n2o_nitro</b></a>.
</p>

    </section>
</main>

<footer>
    2017 &copy; Synrc Research Center
</footer>

</body>
</html>
